# This pipeline will:
#    1. Create a local branch from main
#    2. Add an upstream remote for https://github.com/NetchexGlobalDev/ResourceModules.git
#    3. Merge the upstream/main into the new local branch
#    4. Determine if there are any changes in the new local branch
#        1. If there are changes, create a pull request from the new local branch to main

name: '.Platform - Sync from Public Upstream'

pr: none

schedules:
  - cron: '0 12 * * 0'
    displayName: Weekly Sunday Update
    branches:
      include:
        - main

variables:
  - template: '../../settings.yml'
  - name: pipelinePrincipalGitUserName
    value: 'NetchexGlobalDev'
  - name: pipelinePrincipalGitUserEmail
    value: 'devops@netchexonline.com'
  - name: upstreamRepository
    value: 'https://github.com/NetchexGlobalDev/ResourceModules.git'
  - name: organizationName
    value: 'netchexonline'

jobs:
  - job: Sync_From_Upstream
    pool:
      ${{ if ne(variables.vmImage, '') }}:
        vmImage: ${{ variables.vmImage }}
      ${{ if ne(variables.poolName, '') }}:
        name: ${{ variables.poolName }}
    steps:
      - checkout: self
        clean: true
        persistCredentials: true

      - task: PowerShell@2
        displayName: 'Merge changes from upstream'
        inputs:
          targetType: inline
          pwsh: true
          script: |
            'Configure git to use the pipeline principal' | Write-Host -Foreground 'Yellow';
            git config --global user.name '$(pipelinePrincipalGitUserName)';
            git config --global user.email '$(pipelinePrincipalGitUserEmail)';

            'List branches' | Write-Host -Foreground 'Yellow';
            git branch -a;

            'Fetch all on origin' | Write-Host -Foreground 'Yellow';
            git fetch --all;

            'List branches' | Write-Host -Foreground 'Yellow';
            git branch -a;

            'Checkout main' | Write-Host -Foreground 'Yellow';
            git checkout -t origin/main;

            'Create a new branch from main' | Write-Host -Foreground 'Yellow';
            $Timestamp = Get-Date -Format 'yyyyMMdd.HHmmss';
            $NewBranchName = "upstream-sync/$Timestamp";
            "git checkout -b $NewBranchName main;"
            git checkout -b $NewBranchName main;

            'Add the upstream remote' | Write-Host -Foreground 'Yellow';
            git remote add -f -t main -m main upstream $(upstreamRepository);

            'Merge the upstream/main into the new branch' | Write-Host -Foreground 'Yellow';
            git merge upstream/main --allow-unrelated-histories --no-ff;

            'Add all changes to the new branch' | Write-Host -Foreground 'Yellow';
            git add .;

            'Determine if there are any changes in the new branch' | Write-Host -Foreground 'Yellow';
            git status;

            'Publish new branch' | Write-Host -Foreground 'Yellow';
            git push origin;

            'Connect to Azure DevOps' | Write-Host -Foreground 'Yellow';
            Set-VSTeamAccount -Account '$(organizationName)' -Token '$(System.AccessToken)' -UseBearerToken;

            'Get Repository' | Write-Host -Foreground 'Yellow';
            $Repository = Get-VSTeamGitRepository -ProjectName '$(System.TeamProject)' -Name '$(Build.Repository.Name)';

            $Repository;

            'Create Pull Request' | Write-Host -Foreground 'Yellow';
            Add-VSTeamPullRequest `
              -ProjectName '$(System.TeamProject)' `
              -RepositoryId $(Build.Repository.ID) `
              -SourceRefName "refs/heads/$NewBranchName" `
              -TargetRefName 'refs/heads/main' `
              -Title "Upstream Merge: $Timestamp" `
              -Description "Upstream Merge: $Timestamp"
              # ` -Draft
